#!/usr/bin/env python3

import sys

sys.path.append("../utils")

import game_utils
import graph_utils

from empire import Empire


def resolve_attacks(board, cities, own_empire, rival_empire):

    attack = []

    for city_name in own_empire.get_original_troops_at_loading():
        if city_name == own_empire.get_metropolis():
            continue
        for adjacent in board.get_adjacents(city_name):
            if cities[adjacent].get_owner() != own_empire.get_player() \
                    and rival_empire.get_metropolis() != adjacent:
                attack.append((city_name, adjacent, str(cities[city_name].get_troops())))
                break

    return attack


def print_attack(player_no, attack):

    text = '\n'.join(map(lambda atk: ','.join(atk), attack))
    with open(game_utils.get_attack_filename(player_no), 'w') as file:
        file.write(text)


def main():

    player_no = int(sys.argv[1])
    cities_filename = sys.argv[2]
    routes_filename = sys.argv[3]
    empire_1_filename = sys.argv[4]
    harvest_1_filename = sys.argv[5]
    empire_2_filename = sys.argv[6]
    harvest_2_filename = sys.argv[7]

    own_empire, rival_empire = game_utils.resolve_empires(player_no, empire_1_filename, empire_2_filename)
    own_harvest, rival_harvest = game_utils.resolve_harvests(player_no, harvest_1_filename, harvest_2_filename)

    board, cities = game_utils.load_empty_board(cities_filename, routes_filename)

    game_utils.assign_cities(cities, own_empire, rival_empire)

    game_utils.validate_empires(board, own_empire, rival_empire)

    attack = resolve_attacks(board, cities, own_empire, rival_empire)
    print_attack(player_no, attack)


if __name__ == "__main__":
    main()
